目前我板子是android系统，最近搞过「内核驱动--hal层--jni--service--manager 」这一流程的开发，是参照书籍《android系统源代码情景分析》第二章做的，这一块我还是学得蛮好的，思路清晰。我做了个作品，目前作品实现的内容是：手机app能搜寻到局域网中的板子，操作手机app远程访问板子的gpio、adc。搜寻板子做法是：service写了udp等待手机发来的搜索包，有搜索包发来 板子就回复手机，手机得到板子ip 建立tcp连接。 这作品，网络部分没什么，应用层的东西而已，内核驱动层涉及到的少的可怜：只有gpio和adc，最简单的两个，而且这两个东西几个月前我就搞过了的，上次想搞pwm和spi又没搞好，快失去信心搞这两个了。这作品主要是在写hal层、jni、service这方面的代码，也算是学会了怎么写hal层了，最大收获就是这点了。

【重要提示】：

spi和i2c都比较简单的，看看at24和spidev就可以了，至于camera，我劝你放弃，如果是sensor部分还可以学学ov系列的，v4l2的话，看看vivi，camif就别想了，原厂内核驱动人员才搞这个，

对了input也是比较简单的，电阻屏不看，现在没人用了，看电容屏就可以，驱动也非常简单，加速度驱动和电容类似。lcd的话，也比较简单，就那几个寄存器。fb架构的话看vfb驱动。

pwm这个主要是backlight应用，蜂鸣器类似，也比较简单，看内核自带的背光驱动，使用sysfs接口控制背光。

其实内核每种驱动都有其驱动架构，面对（学习）一种新的设备驱动，分3步：1，学习驱动框架（这个可以看看虚拟设备的实现）。2，学习驱动框架和具体设备的关联（这个可以分析一个具体的真实设备驱动）。3，分析老设备和新设备之间的区别，修改老驱动代码，使其支持新的设备。最后就是调试了，

对了忘记说了，usb，i2c，mmc，spi等等，这些总线适配器的驱动是不用看的，这些也是原厂内核人员写的，我们需要写对应的client驱动，每种驱动都其封装接口，包括数据结构（结构体）和函数api，认真看懂怎么使用他们就可以写出驱动了，。。。这是我最后的回复。
