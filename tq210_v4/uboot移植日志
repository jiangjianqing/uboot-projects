【内存分配信息】：
    0x20000000  内存起始地址
    0x20000100  kernel启动参数地址   通过语句 gd->bd->bi_boot_params = PHYS_SDRAM_1 + 0x100; 设置，uboot启动内核的形式theKernel (0, machid, bd->bi_boot_params)，kernel默认也会从该地址加载启动参数
           --       预留空间: 1MB - 0x100byte
    0x20100000  kernel设备树地址      
           --      预留空间: 1MB
    0x20200000  kernel启动地址
           --      #为kernel预留空间（0x20200000 ~ 0x20800000）
    0x20800000  u-boot启动地址
           --       【kernel可用内存空间】
    0x5FFFFxxx  堆栈指针
           --       u-boot  gd数据区 (大小为gd结构体的大小) 
    0x60000000  内存最大地址(0x60000000 - 0x20000000 = 0x40000000 = 1GB)   
由上图可知，整个内存的可用空间 = 1GB - gd数据区大小 - kernel启动参数数据区大小 - 0x100
 

2019.03.08
    使用bootm 0x20200000 - 0x20100000 成功启动kernel，console字符串显示正常。但还存在不正常的情况：
        1、PLL读取值都为0
        2、卡在启动过程
        此时machid并不正确，改为以下正确值试试看
        arch/arm/tools/mach-types:435:smdkv210		MACH_SMDKV210		SMDKV210		2456        0x998

2019.03.07
    make dtbs 编译设备树成功
    **遇到问题**：uboot 引导 kernel时，显示start kernel 。。。后没有串口输出的问题：
        表象：
            make ARCH=arm menuconfig无法配置samsung串口
        分析过程:
            在defconfig中发现如下两个配置项，其中CONFIG_DEBUG_S3C_UART在arch/arm/include/debug/s5pv210.S中使用
            CONFIG_S3C_LOWLEVEL_UART_PORT=0
            CONFIG_DEBUG_S3C_UART=0
        根因分析:
            最终发现是因为我为了精简目录而修改arch/arm/Kconfig时差生的错误。检验是否正确的标志是在 .config中出现如下三行:
            CONFIG_DEBUG_S3C_UART=0     #使用的调试串口号
            CONFIG_DEBUG_S5PV210_UART=y
            CONFIG_DEBUG_LL_INCLUDE="debug/s5pv210.S"

        >*****s5pv210在defconfig中正确配置调试串口的方法*****：
            #代码中并没有发现有地方使用CONFIG_S3C_LOWLEVEL_UART_PORT
            CONFIG_S3C_LOWLEVEL_UART_PORT=1
            #这么使用 CONFIG_DEBUG_S3C_UART 不正确，该值由Kconfig自动生成
            ##CONF IG_DEBUG_S3C_UART=1
            #s5pv210正确配置调试串口的方法，使用UART0,修改为UART1的方式:CONFIG_DEBUG_S3C_UART1=y
            CONFIG_DEBUG_S3C_UART0=y	
        【教训】：
            Kconfig配置文件修改后一定一定要与未修改的进行对比，这次在此问题上浪费了半天！！！！
        【得到经验】：
            一开始不要对kernel中的Kconfig进行任何修改，直到调试串口输出正常为止        

    【重要发现】kernel 4.x和 kernel 3.x 在板选择方面有很大差别，4.x都由设备树决定
        在 3.16 arch/arm 目录下搜索 Torbreck 发现其在menuconfig中可以选择支持的板，
            arm/mach-s5pv210/Kconfig:179:	bool "Torbreck"
            arm/mach-s5pv210/Kconfig:195:	  Machine support for aESOP Torbreck
       在 4.4 arch/arm目录中已经从Kconfig搜索不到该信息，仅在dts文件中找到
            arm/boot/dts/s5pv210-torbreck.dts:9: * Board device tree source for Torbreck board.
            arm/boot/dts/s5pv210-torbreck.dts:25:	model = "aESOP Torbreck based on S5PV210";

    【内存空间分配犯错】：
        错误的将kernel的启动地址设置为0x20000000，导致kernel启动参数区被覆盖，这样会导致kernel无法启动。

2019.03.06
    编译kernel ,遇到问题：Specify LOADADDR on the commandline to build an uImage
        解决办法：命令行加入 LOADADDR=0x80008000 ，也可以加入环境变量，作用相同
    待验证:在s5pv210_defconfig 中设置 CONFIG_S3C_LOWLEVEL_UART_PORT=0,确保调试串口正确输出
    CONFIG_CMD_FAT=n  暂时设为n
    加入CONFIG_CMD_NFS,引导kernel成功，但kernel的调试串口还没有配置  


2019.03.05
    *检查4412设备树文件，发现串口地址写的不正确，修正后重新尝试是否能进入uboot命令行
    DM9000网卡正常,解决第一次ping失败、id读取错误的问题（连续ping则后面的操作都能成功）：  最终原因应该是soc速度过快导致时序问题，毕竟dm9000比较老
        解决方法：
            >>>>>>drivers/net/dm9000x.c :  dm9000_reset : 273行加入：
            udelay(110);/*add by jjq,解决第一次ping无法成功、id读取错误的问题的问题*/
        根因分析：
            dm9000_reset应该是对网卡进行操作前的复位，其每个动作都会利用udelay进行延时，唯独最后if ((DM9000_ior(DM9000_PIDL) != 0x0) ||  之前没有进行延时。
            jz2440当时没有出现这个问题，估计是s5pv210的速度比2440快很多，导致操作时序出现问题，在该操作前加入延时即可解决。
    
    移植nand成功,以s3c2440_nand.c为蓝本将其改为tq210v4_nand.c(因为其包含board_nand_init函数，属于与板级密切相关),但启动卡在NAND:
        问题排查：
            在include/log.h : 126 启用DEBUG看看问题出现在哪里 #define DEBUG		/*2019.03.06为调试Nand移植而加入*/
            猜测为初始化有问题

    尝试用设备树配置网卡，涉及配置项CONFIG_DM_ETH
    

2019.03.04
    完成spl向uboot的跳转，成功进入uboot命令行，uart0输出正常 （为啥spl部分的打印不正常？此问题还没有找到根源） 猜测：设备树正确配置了uboot串口驱动
    
    DM9000网卡无法ping通主机
网上有两种方法来解决：
    1、启用SROM时钟 （原因是goni单板的lowlevel_init.S默认关闭了该时钟）
        我已经将该文件从Makefile中移除，所以不是该问题
    2、开了soc的Data Cache导致
        我配置CONFIG_SYS_DCACHE_OFF用于关闭。
    3、自我发现，原理图上使用了SMC_WAIT_ENABLE和SMC_BYTE_ENABLE，但参考资料上却没有（s5pv210学习入门手册.pdf），我已经代码中进行配置。
        教训：别人写的资料上总是可能存在一些错误，自己要仔细检查
    4、貌似没有给单板插上网线，反而把网线插在了笔记本上。。。。囧！！
        【正确的组网方式：单板用网线、笔记本用wifi接入同一个路由器并组网。】
    

2019.03.03
    在spl部分完成调试串口的字符输出，但遗留一个问题：前16个byte无法打印出来
    sd卡复制函数没有验证，凭感觉判断与4412差不多（实际上存在差别，且芯片手册给出的函数定义是错误的。）
    
